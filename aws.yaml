AWSTemplateFormatVersion: '2010-09-09'
Description: base

Parameters:
  CidrBlock:
    Type: String
    Default: '10.0.0.0/16'
    Description: VCP CidrBlock

  Name:
    Type: String
    Default: 'charity'
    Description: Name of your projct

  Version:
    Type: String
    Default: '0.0.2-SNAPSHOT'
    Description: Version of your projct
  DBName:
    Default: MyDatabase
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        Ref: 'CidrBlock'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: 'VPC'
      InternetGatewayId:
        Ref: 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId:
        Ref: 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: 'InternetGateway'
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  ApplicationAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ECSBlogScalingRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:GetMetricStatistics
                Resource: "*"


  Subnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: 'VPC'
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: ""
      CidrBlock:
        Fn::Select:
          - 0
          - Fn::Cidr:
              - Ref: 'CidrBlock'
              - 20
              - 8
      Tags:
        - Key: "Name"
          Value: 'SUBNET1'
  Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: 'VPC'
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: ""
      CidrBlock:
        Fn::Select:
          - 1
          - Fn::Cidr:
              - Ref: 'CidrBlock'
              - 20
              - 8
      Tags:
        - Key: "Name"
          Value: 'SUBNET2'

  Subnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet1
      RouteTableId:
        Ref: 'PublicRouteTable'
  Subnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet2
      RouteTableId:
        Ref: 'PublicRouteTable'

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 0.0.0.0/0

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription:
        Ref: AWS::StackName
      SubnetIds:
        - Ref: 'Subnet1'
        - Ref: 'Subnet2'

  MasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      PubliclyAccessible: true
      DBName:
        Ref: DBName
      AllocatedStorage:  '5'
      DBInstanceClass: 'db.t2.micro'
      Engine: postgres
      MasterUsername:
        Ref: DBUser
      MasterUserPassword:
        Ref: DBPassword
      MultiAZ: false
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
        - Ref: 'DBEC2SecurityGroup'
      Tags:
        - Key: Name
          Value: Master Database


  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Ref: 'Name'
      RetentionInDays: 365
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Ref: 'Name'
      Scheme: internet-facing
      Subnets:
        - Ref: Subnet1
        - Ref: Subnet2
      SecurityGroups:
        - Ref: 'EcsSecurityGroup'
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Port:   '80'
      Protocol: HTTP
      VpcId:
        Ref: 'VPC'
      HealthCheckPath: '/actuator/health'
      HealthCheckIntervalSeconds: 70
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,201,302,401

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn:
        Ref: 'PublicLoadBalancer'
      Port: '80'
      Protocol: HTTP

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn:
        Ref: 'PublicLoadBalancerListener'
      Priority: '1'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: '512'
      Memory: '1024'
      Family:
        Ref: 'Name'
      NetworkMode: awsvpc
      ExecutionRoleArn:
        Ref: 'ECSTaskExecutionRole'
      ContainerDefinitions:
        - Name:
            Ref: 'Name'
          Image:
            !Join ['',["ashraf1abdelrasool/", !Ref 'Name',':',!Ref 'Version']]
          PortMappings:
            - ContainerPort: '80'
          Environment:
            - Name: 'server.port'
              Value: '80'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: 'Name'
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: ecs

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName:
        Ref: 'Name'
      Cluster:
        Ref: 'ECSCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: '1'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: 'EcsSecurityGroup'
          Subnets:
            - Ref: Subnet1
            - Ref: Subnet2
      TaskDefinition:
        Ref: 'TaskDefinition'
      LoadBalancers:
        - ContainerName:
            Ref: 'Name'
          ContainerPort:  '80'
          TargetGroupArn:
            Ref: 'TargetGroup'


Outputs:
  ECSCluster:
    Description: The name of the ECS cluster
    Value:
      Ref: 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSCluster' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value:
      Ref: 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  EcsSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value:
      Ref: 'EcsSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'EcsSecurityGroup' ] ]
  CidrBlock:
    Description: The ID of the VPC that this stack is deployed in
    Value:
      Ref: 'CidrBlock'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'CidrBlock' ] ]
  PublicRouteTable:
    Description: The name of the ECS cluster
    Value:
      Ref: 'PublicRouteTable'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicRouteTable' ] ]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskExecutionRole' ] ]
  ApplicationAutoScalingRole:
    Description: The ARN of the Scale role
    Value: !GetAtt 'ApplicationAutoScalingRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ApplicationAutoScalingRole' ] ]
  ExternalUrl:
    Description: The url of the external load balancer
    Value:  !GetAtt 'PublicLoadBalancer.DNSName'
    Export:
      Name: !Join [ ':', [  !Ref 'Name', 'ExternalUrl' ] ]
  MasterJDBCConnectionString:
    Description: JDBC connection string for the master database
    Value: !Join ['', [ !GetAtt [MasterDB, Endpoint.Address], ':',
                        !GetAtt [MasterDB, Endpoint.Port], /, !Ref 'DBName']]
